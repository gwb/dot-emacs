
* Emacs 28 fixes

#+begin_src emacs-lisp
  (use-package gwb-fix-obsolescence
    :demand t)
#+end_src

* Interface tweaks
** Remove frills from interface + some customizations
   
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t)
  (set-fill-column 80)
  (setq ring-bell-function 'ignore)
#+END_SRC

** Some better defaults

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (set-fill-column 80)
  (setq uniquify-buffer-name-style 'forward)
  (show-paren-mode)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "M-<down>") 'scroll-other-window)
  (global-set-key (kbd "M-<up>") 'scroll-other-window-down)
  (setq eshell-cmpl-ignore-case t) ;; ignore case when completing filename
#+END_SRC

** Theming and fonts
Most frequently used themes are:
+ 'monokai (works both on GUI and Terminal)
+ 'snazzy (works well only on GUI)
+ 'zenburn

  To switch themes during usage: M-X counsel-load-theme

#+begin_src emacs-lisp
  ;  (set-face-attribute 'default nil :font "Fira Code Retina" :height 120)
  ;  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 120)
  ;  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 130 :weight 'regular)
#+end_src
    
#+begin_src emacs-lisp
  (defun gwb/after-frame-set-face (frame)
    (if (display-graphic-p frame)
	(progn
	  (message "Faces were set for default, fixed and variable pitch for this frame")
	  (set-face-attribute 'default frame :font "Fira Code Retina" :height 120)
	  (set-face-attribute 'fixed-pitch frame :font "Fira Code Retina" :height 120)
	  (set-face-attribute 'variable-pitch frame :font "Cantarell" :height 130 :weight 'regular))))

  ;; When started with a daemon, no frame is created so need to add hook for when frame is created
  (add-hook 'after-make-frame-functions 'gwb/after-frame-set-face)

  ;; When created without a daemon, frame is actually created before the above hook is setup, so wouldn't work
  ;; instead, need to apply function to existing frames
(mapc 'gwb/after-frame-set-face (frame-list))

#+end_src


#+BEGIN_SRC emacs-lisp
  ;(use-package monokai-theme :ensure t)
  ;(load-theme 'monokai t)

  (use-package doom-themes
    ;:init (load-theme 'doom-monokai-classic t)
    :init (load-theme 'doom-snazzy t)
    :config (doom-themes-org-config))
#+END_SRC

You must run (all-the-icons-install-fonts) one time after
installing this package!

#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

Icons for the doom-modeline has to be set after frame is created, otherwise they won't be
shown when emacs is started in daemon-mode (same problem as set-face-attribute)

#+begin_src emacs-lisp
  (defun gwb/after-frame-modeline (frame)
    (if (display-graphic-p frame)
        (progn
          (message "Set icons for doom modeline")
            ;; (setq doom-modeline-icon (display-graphic-p))
            ;; (setq doom-modeline-icon t)
          (setq doom-modeline-major-mode-icon t)
          (setq doom-modeline-major-mode-color-icon t))))

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 15)
    (set-face-attribute 'mode-line nil :background "#323232")
    (set-face-attribute 'mode-line-inactive nil :background "#282828")
    (set-face-attribute 'mode-line-inactive nil :foreground "#464646")
    (add-hook 'after-make-frame-functions 'gwb/after-frame-modeline)
    (mapc 'gwb/after-frame-modeline (frame-list)))


#+end_src

** Mouse operations for terminal

Note: try to prune this down? Is all of this needed?

#+BEGIN_SRC emacs-lisp
(xterm-mouse-mode t)

; Mouse wheel: scroll up/down; control-wheel for pgup/pgdn.
(defun wheel-scroll-up   ()   (lambda () (interactive) (scroll-up 2)))
(defun wheel-scroll-down ()   (lambda () (interactive) (scroll-down 2)))
(defun wheel-scroll-pgup ()   (lambda () (interactive) (scroll-up 20)))
(defun wheel-scroll-pgdown () (lambda () (interactive) (scroll-down 20)))

(define-key global-map [mouse-5] (wheel-scroll-up))
(define-key global-map [mouse-4] (wheel-scroll-down))
(define-key global-map [C-mouse-5] (wheel-scroll-pgup))
(define-key global-map [C-mouse-4] (wheel-scroll-pgdown))
#+END_SRC

** Special unicode input
+ Investigate: (set-default-coding-systems 'utf-8) 
#+BEGIN_SRC emacs-lisp
(set-language-environment "utf-8")
#+END_SRC

The following is David's special unicode input mode:

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path "~/.emacs.d/inputs")
(add-to-list 'load-path (thread-last user-emacs-directory (expand-file-name "inputs")))
(require 'darais-input)
#+END_SRC

** Fixing basic osx related issues 

Removes error when using dired

#+BEGIN_SRC emacs-lisp
(when (string= system-type "darwin")       
  (setq dired-use-ls-dired nil))
#+END_SRC

** Loads customization file

When modifying variables defined in packages, the *right* approach is to 
use the function `custom-set-variables', *not* `setq'. See the following 
[[https://emacs.stackexchange.com/questions/102/advantages-of-setting-variables-with-setq-instead-of-custom-el][comment]] on stackoverflow. The downside is that variables set that way 
are then appended automatically to the init.el file, making things untidy. 
The following dumps this "automatically generated code" in a different file 
and loads it.

#+BEGIN_SRC emacs-lisp
  (setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

* Outlines

#+begin_src emacs-lisp
  (use-package outline
  :init
  ;;(defvar gwb-outline-minor-mode-map (make-sparse-keymap))
  :bind
  (:map outline-minor-mode-map
        ("M-n" . 'outline-next-visible-heading)
        ("M-p" . 'outline-previous-visible-heading)
        ("C-c C-q" . 'hide-body)
        ("C-c C-o" . 'hide-other)
        ("C-c C-c" . 'hide-entry)
        ("C-c C-a" . 'show-all)
        ("C-c C-e" . 'outline-show-entry)
        ("C-c C-k" . 'show-branches)))
#+end_src

* Window utilities

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind ("M-o" . 'ace-window))
#+end_src

* Search improvements
Notes:
   - You can test regexps interactively using emacs's built-in regexp builder
     => M-x re-builder
     
** Visual Regexp
#+begin_src emacs-lisp
  (use-package visual-regexp
    :ensure t
    :bind (("C-c r" . 'vr/replace)
           ("C-c q" . 'vr/query-replace)))
#+end_src

** isearch

#+begin_src emacs-lisp
  (defun gwb/region-text ()
    (interactive)
    (buffer-substring (region-beginning) (region-end)))

  (defun gwb/isearch-yank-region ()
    "Yanks the current active region to the isearch minibuffer.
    The point is moved to the beginning of the region at the end of 
    the operation, so the first match is always the current region."
    (interactive)
    (let ((word (gwb/region-text))
          (end-word (region-end)))
      (deactivate-mark)
      (goto-char end-word)
      (backward-word)
      (isearch-yank-string word)))

  (defun gwb/isearch-yank-word-at-point ()
    "Yanks the word at point to the isearch minibuffer. This is 
intended to replace the functionality of `isearch-yank-word-or-char' 
mapped to C-s C-w, the behavior of which I don't like."
    (interactive)
    (let ((word (word-at-point t)))
      (forward-word)
      (backward-word)
      (isearch-yank-string word)))

#+end_src

#+begin_src emacs-lisp
  (use-package isearch
    :config
    ;; changes highlighting for active and passive matches
    (set-face-attribute 'lazy-highlight nil :background "tan1")
    (set-face-attribute 'isearch nil :background "SkyBlue1")
    ;; spaces in search separate different search terms instead
    ;; instad of being interpreted literally
    (setq search-whitespace-regexp ".*")
    (setq isearch-lax-whitespace t)
    :bind
    (:map isearch-mode-map
          ("M-m" . gwb/isearch-yank-region)
          ([remap isearch-yank-word-or-char] . gwb/isearch-yank-word-at-point)))
#+end_src

* File navigation

#+begin_src emacs-lisp
(setq dired-dwim-target t) ;; dired will try to get target directory when copying, etc... 
#+end_src

* Hydra
This needs to be loaded early

#+begin_src emacs-lisp
(use-package hydra
:ensure t
:demand t)
#+end_src

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
	    (lambda () 
	      (defhydra hydra-org (org-mode-map "C-.")
		"Org outline movements"
		("s" outline-up-heading "step out")
		("k" outline-next-visible-heading "next")    
		("j" outline-previous-visible-heading "back")  
		("f" org-forward-heading-same-level "next (same level)")
		("d" org-backward-heading-same-level "back (same level)")  
		("SPC" org-cycle "fold/unfold")
		("l" org-metaleft "promote")
		(";" org-metaright "demote"))))
#+end_src


TODO: make hydras for manipulating windows
(e.g. windmove-left, windmove-right, etc... as well as splitting, deleting, etc...)

* which-key
  Help with keybindings. 

  Usage: type the beginning of a key binding and it will show possible completions 
         in the minibuffer
  
#+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t 
      :config
      (which-key-mode))
#+END_SRC

* try
  Allows to try a package without fully installing it.
  
  Usage: M-x try

#+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
#+END_SRC

* Magit 

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . 'magit-status))
#+END_SRC

* Command-log-mode

  Displays all emacs commands used during usage. Useful for debugging and learning.
  
  Usage:
    + First: M-x command-log-mode
    + Then: "C-c x l" to display log in different buffer

#+BEGIN_SRC emacs-lisp
  (use-package command-log-mode
    :ensure t
    :commands (command-log-mode)
    :bind ("C-c x l" . clm/toggle-command-log-buffer))
#+END_SRC

* Projectile

** Projectile mode

#+begin_src emacs-lisp
    (use-package projectile
      :ensure t
      :bind-keymap
      ("C-c p" . projectile-command-map)
      :config
      (projectile-mode +1)
      (setq projectile-completion-system 'ivy))
    
#+end_src

** Counsel-projectile

   + Counsel-projectile remaps some of the original projectile functions to 
     customized `counsel-' functions. The `counsel-' version of projectile-grep 
     does not work, so I need to make sure the remapping is cancelled (see config).
     
     => Two alternatives I've tried (that seem to work). Revert to one of these if issue:
     
        - (define-key projectile-mode-map [remap projectile-grep] 'projectile-grep)
	  
	  or

	- (bind-key [remap projectile-grep] 'projectile-grep projectile-mode-map))
   
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :after (counsel projectile)
    :ensure t
    :config
    (counsel-projectile-mode)
    (define-key projectile-mode-map [remap projectile-grep] nil))
#+END_SRC

* Org-mode
** Basic config

Loads org-mode

(some configs require org to be loaded)

#+begin_src emacs-lisp
;(require 'org)
#+end_src

Indent mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

Line wrap 

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
	    (lambda ()
	      (visual-line-mode 1)))
#+end_src


Basic directories

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")
(setq org-default-notes-file "~/org/refile.org")
(setq org-agenda-files (quote ("~/org")))
#+END_SRC

keybindings

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c b") 'org-switchb)
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c i") 'org-indent-mode)
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC


Setting up custom keywords + selection

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "|" "POSTPONED(p)" "CANCELLED(c)" "DONE(d)")
	(sequence "IDEA(i)" "|" "IMPLEMENTED")
	(sequence "TO-READ(r)" "|" "READ")))

(setq org-use-fast-todo-selection t)
#+END_SRC

** fonts

#+begin_src emacs-lisp
  (defun gwb/org-font-setup ()
    (dolist (face '((org-level-1 . 1.5)
		    (org-level-2 . 1.3)
		    (org-level-3 . 1.1)
		    (org-level-4 . 1.0)
		    (org-level-5 . 1.1)
		    (org-level-6 . 1.1)
		    (org-level-7 . 1.1)
		    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch))

  (defun gwb/org-font-setup-daemon (frame)
    (gwb/org-font-setup))

  (add-hook 'after-make-frame-functions 'gwb/org-font-setup-daemon)

  (gwb/org-font-setup)

#+end_src

** Org-bullet

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Archiving

#+begin_src emacs-lisp
(setq org-archive-mark-done nil)
(setq org-archive-location "~/org/archive/%s_archive::")
#+end_src

** Capture & Refiling

org-capture templates

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      (quote (("t" "todo" entry (file+headline "~/org/refile.org" "Tasks")
	       "* TODO %?\n %i\n (%U) %a")
	      ("b" "book to read" entry (file+headline "~/org/books.org" "To read")
	       "* TO-READ %?\n %i\n")
	      ("i" "idea" entry (file+headline "~/org/refile.org" "Ideas")
	       "* IDEA %?\n %i\n")
	      ("n" "note" entry (file+headline "~/org/refile.org" "Notes")
	       "* %? :NOTE:\n (%U) %a"))))
#+END_SRC

Refiling settings

#+begin_src emacs-lisp
(setq org-refile-targets (quote ((nil :maxlevel . 9)				 
                                 (org-agenda-files :maxlevel . 9))))

(setq org-refile-use-outline-path 'file)
(setq org-goto-interface 'outline-path-completion)
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

** Babel

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (emacs-lisp . t)
     (dot . t)
     (latex . t)))
#+END_SRC

** Simple customization

Batch apply operation to subtree:
  Allows to quickly apply an action over all headlines in the active region:

#+BEGIN_SRC emacs-lisp
(setq org-loop-over-headlines-in-active-region t)
#+END_SRC

  - Comment: 
    For instance if I want to set the same deadline for all items in my Today headline, I can put the cursor on Today then press: 
    
    M-h C-c C-d RET (then RET a bunch of times)

    The M-h part will automatically select all the subtree, and C-c C-d will set the deadline.

Auto logs

#+BEGIN_SRC emacs-lisp
(setq org-log-done t)
#+END_SRC

** Source blocks

This is function will be bound to TAB in my personal keymap
#+begin_src emacs-lisp
  ;; stole this snippet from somewhere on the internet
  (defun gwb/indent-org-block ()
    (interactive)
    (when (org-in-src-block-p)
      (org-edit-special)
      (indent-region (point-min) (point-max))
      (org-edit-src-exit)))
#+end_src

* Ivy / counsel

Company does a lot of things:

- It deals with the UI (and presumably backend) of completion in minibuffer
- It shows completions-at-point in overlays in the buffer (not for all modes)

#+begin_src emacs-lisp

  (use-package gwb-ivy
  :after counsel
  :demand t
  :bind (("M-s z" . gwb-counsel-fzf)))

#+end_src

#+begin_src emacs-lisp
    (use-package counsel
      :after ivy
      :ensure t
      :demand t
      :bind (("M-x" . counsel-M-x)
             ("C-x C-f" . counsel-find-file)
             ("C-h f" . counsel-describe-function)
             ("M-y" . counsel-yank-pop)))
#+end_src

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :demand t
    :bind (:map ivy-minibuffer-map
		("C-j" . ivy-immediate-done)
		("RET" . ivy-alt-done))
    :config
    (ivy-mode 1)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) "))
#+end_src

#+begin_src emacs-lisp
  (use-package ivy-rich
  :ensure t
  :demand t
  :init (ivy-rich-mode 1)
  )
#+end_src

#+begin_src emacs-lisp
(use-package ivy-hydra)
#+end_src

Make grep buffer writable. Allows one to edit occur buffers by:
- Running C-x C-q to make occur buffer writable
- ... making whatever change
- Running C-x C-s to save changes. The changes will be written in to the source files.
#+begin_src emacs-lisp
(use-package wgrep)
#+end_src

* Undoo-tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode)
    :bind
    (("C-z" . undo-tree-undo)
     ("M-z" . undo-tree-redo)))
#+end_src

* Company

#+begin_src emacs-lisp
  (use-package company
    :hook ((c-mode . company-mode)
           (ess-r-mode . company-mode)
           (inferior-ess-r-mode . company-mode))
    :bind (:map company-active-map
                ("C-n" . company-select-next-or-abort)
                ("C-p" . company-select-previous-or-abort))
    :config
    (setq company-idle-delay nil))
#+end_src


In some situations, we don't want to autocomplete (e.g. when trying to
autocomplete paths with many files

#+begin_src emacs-lisp
  ;; (setq company-completion-started-hook
  ;;      (lambda (is-manual)
  ;;
  ;;(when (home-dir-path (thing-at-point 'line t))
  ;;          (message "harshly cancelling completion")
  ;;          (company-cancel))))
#+end_src


#+begin_src emacs-lisp
  (use-package company-c-headers
    :after (company)
    :config
    (add-to-list 'company-backends 'company-c-headers)
    (add-to-list 'company-c-headers-path-system "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include"))
#+end_src


#+begin_src emacs-lisp
  (use-package gwb-indent
    :after company)
#+end_src

** FIX
#+begin_src emacs-lisp
  ;; (use-package gwb-indent
  ;;   :after company
  ;; :bind (:map company-mode-map
  ;;             ("TAB" . gwb-indent-for-tab-command)))
#+end_src


* Semantic

=> Not working for now.. need to find a fix?
#+begin_src emacs-lisp
  ;(use-package semantic
  ;  :hook (c-mode . semantic-mode))
#+end_src

* Helpful

#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

* Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :init
    (yas-global-mode 1))
#+end_src

* Programming languages
** Misc languages

I have played around, at some point or another, with many programming languages. This section deals with the languages for which the config is minimal (or non-existent). 

#+begin_src emacs-lisp
  (use-package julia-mode 
    :ensure t)

  (use-package markdown-mode
    :ensure t)

  (use-package elm-mode
    :ensure t)

  (use-package haskell-mode
  :ensure t
  :hook (haskell-mode . interactive-haskell-mode))

  (use-package rust-mode
    :init
    (add-hook 'rust-mode (lambda () (setq indent-tabs-mode nil))))
#+end_src

** Lisp languages

#+begin_src emacs-lisp
  (use-package lispy
    :ensure t
    :hook (emacs-lisp-mode . lispy-mode)
    :bind (:map lispy-mode-map
                ("M-o" . nil)))

  (use-package racket-mode 
    :ensure t
    :config
    (setq tab-always-indent 'complete)
    (require 'racket-xp)
    (add-hook 'racket-mode-hook #'racket-xp-mode))

  (use-package slime
    :commands slime
    :init
    (load (expand-file-name "~/.quicklisp/slime-helper.el"))
    (setq inferior-lisp-program "sbcl"))

  (use-package emacs-lisp-mode
    :hook (emacs-lisp-mode . hs-minor-mode)
    :bind (:map emacs-lisp-mode-map
                ("M-[" . hs-hide-all)
                ("M-]" . hs-show-all)))
#+end_src

** R

ESS is (used to be?) fiddly to setup correctly.

- I used to have both a version installed from the website, and one from
  MELPA... this was creating all sorts of issues. I have now removed the
  version from the website (it was a very old version), and kept only
  the MELPA version.
  NOTE: the version on the website is very very old (2019) while the MELPA
  version (i.e. the devel version) is updated very regularly.
  => make sure to stick to the MELPA version

- To load ESS, we used to need to include a (require 'ess-site) statement. This
  is no longer the case, as per the documentation (see [[http://ess.r-project.org/ess.pdf][here]] page 7 -- or search
  'use-package' in the ESS manual).

- The first (use-package ess :defer t) sets up ESS, deferring the loading. When the
  loading is triggered by an autoload event (e.g. visiting an R file), ESS loads the
  ess-r-mode. The binding needs to be set in a separate ess-r-mode use-package because
  the ess-r-mode-map is defined by the ess-r-mode package, so if we put the bindings in
  the first one, the mode maps are not defined at the moment when they are evaluated.


#+begin_src emacs-lisp
    (use-package ess
      :defer t)

    (use-package ess-r-mode
      :hook
      ((ess-r-mode . hs-minor-mode))
      :bind
      (:map
       ess-r-mode-map
       ("TAB" . gwb-indent-for-tab-command)
       ("_" . ess-insert-assign)
       ("M-[" . hs-hide-all)
       ("M-]" . hs-show-all)
       :map
       inferior-ess-r-mode-map
       ("TAB" . gwb-indent-for-tab-command)
       ("_" . ess-insert-assign)
       ("M-[" . hs-hide-all)
       ("M-]" . hs-show-all)))


#+end_src

Below are my customizations for ESS. A few comments:



#+begin_src emacs-lisp
    (use-package gwb-essr
      :after ess-r-mode
      :hook
       ((inferior-ess-r-mode . gwb-essr-configure-iess))
      :bind
      (:map
       ess-r-mode-map
        ("%" . gwb-essr-insert-pipe-maybe)
        ("M-TAB" . gwb-essr-toggle-hide-function)
      :map
      inferior-ess-r-mode-map
        ("%" . gwb-essr-insert-pipe-maybe)
        ("M-TAB" . gwb-essr-toggle-hide-function)))

#+end_src

** C
#+begin_src emacs-lisp
  (use-package cc-mode
    :config
    (setq c-default-style "linux")
    (setq c-basic-offset 4))
#+end_src
** Latex


#+begin_src emacs-lisp
  ;; Reftex
  (require 'reftex)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)

  ;; Auxtex
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)

  ;; PDF search
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

  (setq TeX-PDF-mode t)
  (when (eq system-type 'darwin)
    (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
    (setq TeX-view-program-list
  '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
    )


  ;; (use-packag auctex-latexmk) 
  (require 'auctex-latexmk)
  (auctex-latexmk-setup)
  (setq auctex-latexmk-inherit-TeX-PDF-mode t)

  ;; Only change sectioning colour
  (setq font-latex-fontify-sectioning 'color)
  ;; super-/sub-script on baseline
  (setq font-latex-fontify-script nil) ; might not keep this line.. I like smaller {sub/super}scripts
  (setq font-latex-script-display (quote (nil)))
  ;; Do not change super-/sub-script font


  (setq font-latex-deactivated-keyword-classes
      '("italic-command" "bold-command" "italic-declaration" "bold-declaration"))

#+end_src

** Python

My python uses the `python-mode` as a major mode, but relies heavily on the minor mode `elpy-mode`.

For `python-mode`, the config is pretty straightforward. I configure TAB to use my custom completion command (based on `company`), and configure the shels to use.

#+begin_src emacs-lisp
    (use-package python
      :ensure nil
      ;:bind
      ;(:map python-mode-map
      ;      ("TAB" . gwb-indent-for-tab-command))
      :config
      (setq python-shell-interpreter "ipython3")
      ;(setq python-shell-interpreter-args "-i --simple-prompt")
      )

#+end_src


For `elpy-mode`, the config requires a bit more explaining. The Elpy package provides the `elpy-enable' command which provides a wrapper around the `elpy-mode' command which actually activates the minor mode. The minor mode command `elpy-mode` does a few things in its body, including setting up some special configs for `company`. One thing it does, which I don't like, is to setup autocompletion by setting `(setq company-idle-delay 0.1)`. So I'm basically writing as small hook around `elpy-mode` to deactivate auto-complete every time elpy-mode is called.

#+begin_src emacs-lisp
  (defun gwb-no-company-idle nil
    (setq company-idle-delay nil))

  (use-package elpy
    :hook ((elpy-mode . gwb-no-company-idle)
           (python-mode . elpy-enable))
    :custom
    (elpy-rpc-python-command "python3"))
    ;;:init
    ;;(elpy-enable))
    ;;(setq python-shell-interpreter-args "-c exec('__import__(\\'readline\\')') -i"))
#+end_src

* terminals
Useful keybindings for terminal:
- C-c C-k: term-char-mode (can't use usual emacs bindings)
- C-c C-j: term-line-mode (can use emacs bindings)
- C-c C-p: jump to last prompt
- M-p: travel history
  
 
#+begin_src emacs-lisp
  (use-package term
    :ensure nil
    :config
    (setq term-prompt-regexp "^[^#$%>\\n]*[#$%>] *"))

  (use-package eterm-256color
    :ensure t
    :hook (term-mode . eterm-256color-mode))
#+end_src

* Custom functions

Spotify custom utilities

#+begin_src emacs-lisp
(use-package elspot)
#+end_src

Hugo utilities

#+begin_src emacs-lisp
(use-package gwb-hugo) ;; allows to quickly start and kill hugo servers
#+end_src

Mark word

#+begin_src emacs-lisp
(defun gwb/mark-word-at-point ()
  (interactive)
  (let ((word (word-at-point t)))
    (progn
      (forward-word)
      (backward-word)
      (set-mark-command 'nil)
      (search-forward word))))
#+end_src

My usual latex note template

#+begin_src emacs-lisp
(defun gwb/latex-note ()
  "Inserts my `note' template, and automatically turns on latex (auctex) mode"
  (interactive)
  (insert-file-contents-literally "~/.emacs.d/my-latex-templates/note.tex")
  (latex-mode))

;(global-set-key (kbd "C-c x n") 'my/latex-note)
#+end_src


Better Occur behavior

#+begin_src emacs-lisp
  (defun gwb/kill-occur-buffer-window (&rest args)
      (delete-window (get-buffer-window "*Occur*")))


  ;; (defun gwb/switch-to-occur-buffer (&rest args)
  ;;   (select-window (get-buffer-window "*Occur*")))

  (defun gwb/switch-to-occur-buffer (&rest args)
    (let ((buffer-window (get-buffer-window "*Occur*")))
      (when buffer-window
        (select-window buffer-window))))


  (advice-add 'occur-mode-goto-occurrence :after #'gwb/kill-occur-buffer-window)

  (advice-add 'occur :after #'gwb/switch-to-occur-buffer)

#+end_src

Line movement

#+begin_src emacs-lisp
(defun gwb/move-beginning-of-line (arg)
  "moves first to first non-whitespace characters. If already there moves to 
to beginning of line"
  (interactive "^p")
  (setq arg (or arg 1))
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key [remap move-beginning-of-line]
                'gwb/move-beginning-of-line)

#+end_src


Goes to beginning of match after matching

#+begin_src emacs-lisp
(defun gwb/goto-other-end ()
  "If search forward, return to beginning of match. If search backward, do 
nothing (already goes to beginning automatically"
  (if (< isearch-other-end (point))
      (goto-char isearch-other-end)))

(defun gwb/isearch-exit ()
  "Modifies the isearch-exit function to return to beginning of 
word if succesful match"
  (interactive)
  (if (and search-nonincremental-instead
	   (= 0 (length isearch-string)))
      (let ((isearch-nonincremental t))
	(isearch-edit-string)) ;; this calls isearch-done as well
    (isearch-done))
  (gwb/goto-other-end)
  (isearch-clean-overlays))


(add-hook 'isearch-mode-hook
	  (lambda ()
	    (define-key isearch-mode-map "\r"
	      'gwb/isearch-exit)))

#+end_src

Flipping windows

#+begin_src emacs-lisp
(defun gwb/flip-windows ()
  "flips the buffers in split-screen windows"
  (interactive)
  (unless (= 2 (count-windows))
    (error "Only works with two windows."))
  (let ((this-buffer (window-buffer (selected-window)))
	(alt-buffer (window-buffer (previous-window))))
    (set-window-buffer (previous-window) this-buffer)
    (set-window-buffer (selected-window) alt-buffer)
    (select-window (previous-window))))

#+end_src

Open README.org

#+begin_src emacs-lisp
(defun gwb/edit-config ()
  "edits README.org"
  (interactive)
  (find-file "~/.emacs.d/README.org"))

#+end_src

Copy to osx

#+begin_src emacs-lisp
(defun gwb/copy-to-osx (start end)
  (interactive "r")
  (shell-command-on-region start end "pbcopy"))
#+end_src

For some reason, the ring bell function gets reactivated
every time my laptop goes to sleep on mac os Big Sur... Need
a shortcut to quickly set this.

#+begin_src emacs-lisp
  (defun gwb-mute-alerts ()
    (interactive)
    (setq ring-bell-function 'ignore))

#+end_src

Note: interestingly, CMD + SHIFT is mapped to super (s). e.g. CMD+SHIFT+SPC maps to s-SPC.

#+begin_src emacs-lisp
  (defvar gwb-custom-keymap nil "my keymap..")

  (setq gwb-custom-keymap (make-sparse-keymap))
  (global-set-key (kbd "C-c x") gwb-custom-keymap)
  (global-set-key (kbd "M-SPC") gwb-custom-keymap)

  (define-key gwb-custom-keymap (kbd "m") 'gwb/mark-word-at-point)
  (define-key gwb-custom-keymap (kbd "n") 'gwb/latex-note)
  (define-key gwb-custom-keymap (kbd "o") 'gwb/flip-windows)
  (define-key gwb-custom-keymap (kbd ".") 'gwb/edit-config)
  (define-key gwb-custom-keymap (kbd "w") 'gwb/copy-to-osx)
  (define-key gwb-custom-keymap (kbd "<") 'gwb-mute-alerts)
  (define-key gwb-custom-keymap (kbd "TAB") 'gwb/indent-org-block)
  (define-key gwb-custom-keymap (kbd "s") 'hydra-spotify/body)
  (define-key gwb-custom-keymap (kbd "u") 'undo-tree-visualize)
#+end_src


Another custom keymap for keybindings that should not be overriden by major / minor modes

#+begin_src emacs-lisp

  ;; (defvar gwb-protected-keymap (make-sparse-keymap)
  ;;   "Keymap for my protected keybindings")

  ;; (define-minor-mode gwb-protected-keybindings-mode
  ;;   "Minor mode for my protected keybindings."
  ;;   :init-value t
  ;;   :global t
  ;;   :keymap gwb-protected-keymap)


  ;; (add-to-list 'emulation-mode-map-alists
  ;;              `((gwb-protected-keybindings-mode . ,gwb-protected-keymap)))

  ;; (define-key gwb-protected-keymap (kbd "TAB") 'gwb-indent-for-tab-command)
#+end_src

